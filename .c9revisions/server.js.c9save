{"ts":1371264745609,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require('express')\r\n  , http = require('http');\r\nvar app = express();\r\nvar path = require('path');\r\n\r\nvar util = require(\"util\");\r\nvar url = require(\"url\");\r\nvar fs = require(\"fs\");\r\n\r\nvar mysql = require('mysql');\r\n\r\n\r\nvar server = http.createServer(app);\r\nvar io = require('socket.io').listen(server);\r\n\r\n\r\n\r\n\r\nvar webpage_controller = require(\"./webpageController\");\r\nvar teacher_controller = require(\"./teacherController\");\r\nvar student_controller = require(\"./studentController\");\r\n\r\n\r\nvar TeacherTools = require(\"./teacherTools\");\r\n\r\n\r\napp.use(express.bodyParser({uploadDir:'./'}));\r\n\r\n \r\n\r\n\r\n////////상수///////\r\n\r\nvar ID_SOC_PAIR = [];\r\nvar classState = TeacherTools.newClassState();\r\nvar pptShare = TeacherTools.newPPTShare();\r\nvar groupShare = TeacherTools.newGroupShare();    \r\n    \r\nvar mysqlConfig = {\r\n    host : \"lattetime.cafe24.com\",\r\n    port : \"3306\",\r\n    user : \"root\",\r\n    password : \"latte!123\",\r\n    database : \"lattetime\",\r\n    insecureAuth: true\r\n}\r\n\r\nvar conn = mysql.createConnection(mysqlConfig);\r\n\r\nconn.connect();\r\n\r\n\r\n////////////////////////웹 서버 부분//////////\r\n\r\n//파일 리다이렉트, 페이지 보여주기 등\r\napp.get('/', function(req, res) {\r\n    console.log(\"===============================================\");\r\n    res.sendfile(__dirname + '/index.html');\r\n});\r\n\r\napp.get('/teacher', function(req, res) {\r\n    console.log(\"===============================================\");\r\n    res.sendfile(__dirname + '/teacher.html');\r\n});\r\n\r\napp.get('/student', function(req, res) {\r\n    console.log(\"===============================================\");\r\n    res.sendfile(__dirname + '/student.html');\r\n});\r\n\r\napp.get('/nathan', function(req, res) {\r\n    console.log(\"===============================================\");\r\n    res.sendfile(__dirname + '/nathan.html');\r\n});\r\n\r\napp.get('/file', function(req, res) {\r\n    console.log(\"===============================================\");\r\n    res.sendfile(__dirname + '/file.html');\r\n});\r\n\r\n//////////////////////added to file upload///////////////////////\r\n\r\n\r\n\r\napp.post('/upload', function(req, res, next) {\r\nconsole.log(\"body : \"+req.body);\r\nconsole.log(\"files : \" +req.files);\r\nconsole.log(\"uploadfile : \" + req.files.uploadfile );\r\nconsole.log(\"req.files.uploadfile.path : \" + req.files.uploadfile.path );\r\nconsole.log(\"req.files.uploadfile.name : \" + req.files.uploadfile.name );\r\n\r\n// get the temporary location of the file\r\n    var tmp_path = req.files.uploadfile.path;\r\n    // set where the file should actually exists - in this case it is in the \"images\" directory\r\n    var target_path = './tmp/' + req.files.uploadfile.name;\r\n    // move the file from the temporary location to the intended location\r\n    \r\n    console.log(\"target_path : \" + target_path);\r\n    \r\n    fs.exists('./tmp', function (exists) {\r\n    \r\n    //folder already exsist... \r\n      if( exists == true ){\r\n            fs.rename(tmp_path, target_path, function(err) {\r\n              if (err) throw err;\r\n              // delete the temporary file, so that the explicitly set temporary upload dir does not get filled with unwanted files\r\n                  fs.unlink(tmp_path, function() {\r\n                  if (err) throw err;\r\n                  res.send('File uploaded to: ' + target_path + ' - ' + req.files.uploadfile.size + ' bytes');\r\n                  });\r\n          });\r\n      }\r\n       //else no folder, make it\r\n      else{\r\n            fs.mkdir( './tmp', function(err){\r\n              if(err) throw err;\r\n              fs.rename(tmp_path, target_path, function(err) {\r\n                  if (err) throw err;\r\n                  // delete the temporary file, so that the explicitly set temporary upload dir does not get filled with unwanted files\r\n                  fs.unlink(tmp_path, function() {\r\n                        if (err) throw err;\r\n                        res.send('File uploaded to: ' + target_path + ' - ' + req.files.uploadfile.size + ' bytes');\r\n                  });\r\n              });\r\n          });\r\n      }\r\n    });\r\n   \r\n   \r\n    \r\n});\r\n\r\n//////////////////////////////////////\r\n\r\n\r\n\r\n//url 들어오면 파일 주는 부분\r\napp.use(function(request, response, next){\r\n    var uri = url.parse(request.url).pathname;\r\n    console.log(\"uri : \"+uri);\r\n        var filename = path.join(process.cwd(), uri);\r\n        util.puts(\"filename : \" + filename);\r\n        fs.exists(filename, function(exists){\r\n                if(!exists){\r\n                        response.writeHead(404,{\"Content-type\":\"text/plain\"} );\r\n                        response.end(\"404 Not Found\\n\");\r\n                        return;\r\n                }\r\n\r\n                fs.readFile(filename, function(err, data){\r\n                        if(err){\r\n                                console.log(\"error!!!\");\r\n                                response.writeHead(500, {\"Content-type\":\"text/plain\"});\r\n                                response.end(err + \"\\n\");\r\n                                return;\r\n                        }\r\n                        response.statusCode = 200;\r\n                      //  response.write(data, \"binary\");\r\n                        response.end(data, \"binary\");\r\n                });\r\n        });\r\n});\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////웹소켓 시작\r\n\r\n\r\n\r\n//**************\r\n//리스닝\r\n//**************\r\n\r\n\r\napp.listen(3000);\r\nserver.listen(8686);\r\n\r\n//app.listen(7777);\r\n//app.listen(8888);\r\n//app.listen(9999);\r\n//app.listen(process.env.PORT);\r\n\r\nconsole.log(\"Listening....\");\r\nconsole.log(\"ip : \" + process.env.IP + \", port : \" + process.env.PORT);\r\nconsole.log(\"ip : \" + process.env.IP + \", port : \" + 3000);\r\nconsole.log(\"ip : \" + process.env.IP + \", port : \" + 8686);\r\n\r\n\r\nio.sockets.on('connection', function (socket) {\r\n\r\nconsole.log(\"User connected\");\r\n\r\n \r\n socket.on('close', function(data){\r\n      console.log(\"close connection\");\r\n });\r\n \r\nsocket.on('data', function( data) {\r\n    \r\n console.log(\"data received\");\r\n    \r\n    var received; //받은 데이터\r\n\r\n    //JSON이용해서 Message Parse\r\n\treceived = data;\r\n\r\nconsole.log(\"groupShare : %j\" , groupShare );\r\n\r\n    //메세지에 따라 처리\r\n\t\tswitch(parseInt(received.MessageNum / 100, 10)){\r\n\t\t\tcase 1:\r\n\t\t\t\tconsole.log(\"Messeage num 100 ~ 199 : Teacher Mobile\");\r\n                   //커넥션을 배열로 유지\r\n               connectionRetreive(received.id, socket, TeacherTools.MOBILE, TeacherTools.TEACHER );\r\n                teacher_controller.call(socket, received,  conn,  ID_SOC_PAIR, classState, pptShare, groupShare);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tconsole.log(\"Messeage num 200 ~ 299 : Student Mobile\");\r\n                   //커넥션을 배열로 유지\r\n             connectionRetreive(received.id, socket, TeacherTools.MOBILE, TeacherTools.STUDENT );\r\n                student_controller.call(socket, received,  conn, ID_SOC_PAIR, classState, groupShare);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n                console.log(\"Messeage num 300 ~ 399 : Web page\");\r\n                   //커넥션을 배열로 유지\r\n             connectionRetreive(received.id, socket, TeacherTools.WEBPAGE, TeacherTools.TEACHER );\r\n                webpage_controller.call(socket, received,  conn, ID_SOC_PAIR);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 4:\r\n                console.log(\"Messeage num 400 ~ 499 : Sharing\");\r\n                teacher_controller.call(socket, received,  conn,  ID_SOC_PAIR, classState, pptShare, groupShare);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault: //에러 \r\n\t\t\t\t;\r\n\t\t}\r\n\t\t\r\n\t//결과는 마이에스큐엘까지 끝난 다음 반환한다. \r\n  \r\n});\r\n\r\n\r\n});\r\n\r\nfunction connectionRetreive(id, socket, deviceType, manType){\r\n    \r\n     var tempIdConn\r\n     \r\n     //이미 커넥션이 들어가 있는 경우 빼버린다. \r\n     \r\n     //새로 갱신해서 넣는다. \r\n     \r\n     var i;\r\n     \r\n     for( i=0 ; i< ID_SOC_PAIR.length ; i++ ) {\r\n        if( ID_SOC_PAIR[i].deviceType == deviceType ){\r\n            if( ID_SOC_PAIR[i].manType == manType) {\r\n                if( ID_SOC_PAIR[i].id == id ) {\r\n                    ID_SOC_PAIR.splice(i, 1);\r\n                }\r\n            }\r\n        } \r\n     }\r\n     \r\n       tempIdConn =   TeacherTools.newIdSocekt();\r\n       tempIdConn.id = id;\r\n       tempIdConn.socket = socket;\r\n             tempIdConn.deviceType = deviceType;\r\n             tempIdConn.manType = manType;\r\n             ID_SOC_PAIR.push(tempIdConn);\r\n    \r\n    for( i=0 ; i< ID_SOC_PAIR.length ; i++ ) {\r\n        console.log(\"i : \" + i);\r\n        console.log(\"ID_SOC_PAIR[i].deviceType : \" + ID_SOC_PAIR[i].deviceType );\r\n        console.log(\"ID_SOC_PAIR[i].manType : \" + ID_SOC_PAIR[i].manType );\r\n        console.log(\"ID_SOC_PAIR[i].].id : \" + ID_SOC_PAIR[i].id );\r\n    }\r\n}\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":8434}]],"length":8434}
